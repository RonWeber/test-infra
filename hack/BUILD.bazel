load("@pylint_deps//:requirements.bzl", "requirement")
load("@build_bazel_rules_nodejs//:defs.bzl", "nodejs_test")

package(default_visibility = ["//visibility:public"])

py_test(
    name = "coalesce_test",
    size = "small",
    srcs = [
        "coalesce.py",
        "coalesce_test.py",
    ],
)

py_test(
    name = "verify_boilerplate",
    srcs = ["verify_boilerplate.py"],
    data = ["//:all-srcs"],
    tags = ["lint"],
)

sh_test(
    name = "verify-pylint",
    srcs = ["verify-pylint.sh"],
    data = [
        ":pylint_bin",
        "//:all-srcs",
    ],
    tags = ["lint"],
)

nodejs_test(
    name = "verify-tslint",
    data = [
        "//:all-srcs",
        "@npm//tslint",
    ],
    entry_point = "tslint/bin/tslint",
    tags = ["lint"],
    templated_args = [
        "-p",
        ".",
    ],
)

MISSPELL = "@com_github_client9_misspell//cmd/misspell"

sh_test(
    name = "verify-spelling",
    srcs = ["verify-spelling.sh"],
    args = ["-m $(location %s)" % MISSPELL],
    data = [
        "//:all-srcs",
        MISSPELL,
    ],
    tags = ["lint"],
)

protoc = "@com_google_protobuf//:protoc"

protoc_gen_go = "@com_github_golang_protobuf//protoc-gen-go"

sh_binary(
    name = "update-protos",
    srcs = ["update-protos.sh"],
    args = [
        "$(location %s)" % protoc,
        "$(location %s)" % protoc_gen_go,
        "$(location %s)" % ":boilerplate/boilerplate.generated.go.txt",
    ],
    data = [
        ":boilerplate/boilerplate.generated.go.txt",
        "//:all-srcs",
        protoc,
        protoc_gen_go,
    ],
    tags = ["local"],
)

sh_test(
    name = "verify-protos",
    srcs = ["verify-protos.sh"],
    args = [
        "$(location %s)" % ":update-protos",
        "$(location %s)" % protoc,
        "$(location %s)" % protoc_gen_go,
        "$(location %s)" % ":boilerplate/boilerplate.generated.go.txt",
    ],
    data = [
        ":boilerplate/boilerplate.generated.go.txt",
        ":update-protos",
        protoc,
        protoc_gen_go,
        "@//:all-srcs",
    ],
)

test_suite(
    name = "verify-all",
    tags = ["lint"],  # picks up all non-manual targets with this tag
)

GAZELLE = "//vendor/github.com/bazelbuild/bazel-gazelle/cmd/gazelle"

KAZEL = "//vendor/k8s.io/repo-infra/kazel"

GO = "@go_sdk//:bin/go"

sh_binary(
    name = "update-deps",
    srcs = ["update-deps.sh"],
    args = [
        "$(location %s)" % GO,
        "$(location %s)" % GAZELLE,
        "$(location %s)" % KAZEL,
        "$(location :update-bazel)",
    ],
    data = [
        GAZELLE,
        GO,
        KAZEL,
        ":update-bazel",
    ],
)

GAZELLE_BOOT = "@bazel_gazelle//cmd/gazelle"

KAZEL_BOOT = "@io_k8s_repo_infra//kazel"

sh_binary(
    name = "bootstrap-testinfra",
    srcs = ["update-deps.sh"],
    args = [
        "$(location %s)" % GO,
        "$(location %s)" % GAZELLE_BOOT,
        "$(location %s)" % KAZEL_BOOT,
        "$(location :update-bazel.sh)",
    ],
    data = [
        GAZELLE_BOOT,
        GO,
        KAZEL_BOOT,
        ":update-bazel.sh",
    ],
)

sh_test(
    name = "verify-deps",
    srcs = ["verify-deps.sh"],
    args = [
        "$(location :update-deps)",
        "$(location %s)" % GO,
        "$(location %s)" % GAZELLE,
        "$(location %s)" % KAZEL,
        "$(location :update-bazel)",
    ],
    data = [
        GAZELLE,
        GO,
        KAZEL,
        ":update-bazel",
        ":update-deps",
        "@//:all-srcs",
    ],
    tags = ["lint"],
)

sh_binary(
    name = "update-bazel",
    srcs = ["update-bazel.sh"],
    args = [
        "$(location %s)" % GAZELLE,
        "$(location %s)" % KAZEL,
    ],
    data = [
        GAZELLE,
        KAZEL,
    ],
)

sh_test(
    name = "verify-bazel",
    srcs = ["verify-bazel.sh"],
    args = [
        "$(location %s)" % GAZELLE,
        "$(location %s)" % KAZEL,
    ],
    data = [
        "@//:all-srcs",
        GAZELLE,
        KAZEL,
    ],
    tags = ["lint"],
)

py_binary(
    name = "pylint_bin",
    srcs = ["pylint_bin.py"],
    tags = ["lint"],
    # NOTE: this should only contain direct third party imports and pylint
    deps = [
        "@influxdb",
        "@pylint",
        "@pytz",
        "@requests",  # TODO(fejta): figure out a better solution
        "@ruamel_yaml//ruamel/yaml:ruamel.yaml",
        "@yaml",
        requirement("setuptools"),
    ],
)

genrule(
    name = "generate-security-jobs",
    srcs = [
        "//config:all-srcs",
        "//prow:config.yaml",
    ],
    outs = ["zz.security-jobs.yaml"],
    # $@ == expected location for zz.security-jobs.yaml
    cmd = "./$(location //config/jobs/kubernetes-security:genjobs) --config=prow/config.yaml --jobs=config/jobs --output=\"$@\"",
    tools = ["//config/jobs/kubernetes-security:genjobs"],
)

sh_binary(
    name = "update-config",
    srcs = ["update-config.sh"],
    data = [
        ":zz.security-jobs.yaml",
    ],
)

sh_test(
    name = "verify-config",
    srcs = ["verify-config.sh"],
    args = [
        "$(location //prow/cmd/checkconfig)",
        "--config-path=prow/config.yaml",
        "--job-config-path=config/jobs",
        "--plugin-config=prow/plugins.yaml",
    ],
    data = [
        ":zz.security-jobs.yaml",
        "//config:all-srcs",
        "//config/jobs/kubernetes-security:all-srcs",
        "//prow:config.yaml",
        "//prow:plugins.yaml",
        "//prow/cmd/checkconfig",
    ],
    tags = ["lint"],
)

filegroup(
    name = "package-srcs",
    srcs = glob(["**"]),
    tags = ["automanaged"],
    visibility = ["//visibility:private"],
)

filegroup(
    name = "all-srcs",
    srcs = [":package-srcs"],
    tags = ["automanaged"],
    visibility = ["//visibility:public"],
)
